Para filtrar los módulos según el rol del usuario logueado, puedes modificar tu componente `Modules` para que utilice el estado del rol desde el `authStore`. Aquí te dejo los pasos y el código ajustado:

### Cambios necesarios

1. **Acceso al `authStore`**: Importa y utiliza `useAuthStore` para obtener el rol del usuario logueado.
2. **Filtrar los módulos**: Utiliza una lógica que filtre los módulos según el `rol_id`.
3. **Ajustar el renderizado**: Asegúrate de que solo se rendericen los módulos correspondientes al rol.

### Código ajustado del componente `Modules`

```tsx
import LogginModulesCard from "../components/LogginModules/LogginModulesCard";
import { modulesStructureTypes } from "../backendMuckData/types/UserLogginModules/user_loggin_modules";
import { modulesData } from "../backendMuckData/datas/UserLoginModules/data_login_modules";
import "../css/modules.css";
import ROUTES from "../enviroment/variables_routes";
import { useNavigate } from "react-router-dom";
import { Skeleton } from "@mui/material";
import { useEffect, useState } from "react";
import { useAuthStore } from "../store/authStore";

export default function Modules() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(true);

  // Obtener rol del usuario desde el store
  const roleName = useAuthStore((state) => state.roleName);
  const user = useAuthStore((state) => state.user);

  useEffect(() => {
    // Simula la carga por 2 segundos
    setTimeout(() => setLoading(false), 2000);
  }, []);

  // Filtrar módulos según el rol del usuario
  const filteredModules = modulesData.filter((module) => {
    if (!user || !user.rol_id) return false;

    switch (user.rol_id) {
      case 1: // Mostrar todos los módulos
        return true;
      case 2: // Mostrar Emisor, Signos y Consultorio
      case 3:
        return ["Emisor", "Signos", "Consultorio"].includes(module.title);
      case 4: // Mostrar solo Consultorio
        return module.title === "Consultorio";
      default: // Por defecto no mostrar módulos
        return false;
    }
  });

  const handleModuleNavigation = (moduleName: string) => {
    const routes: { [key: string]: string } = {
      Emisor: ROUTES.MODULES.MFCHILD,
      Signos: ROUTES.MODULES.MSCHILD,
      Consultorio: ROUTES.MODULES.MTCHILD,
      Example: ROUTES.MODULES.M5CHILD,
    };

    const route = routes[moduleName];
    if (route) {
      navigate(route); // Navega a la ruta específica del módulo
    } else {
      console.warn(`No se encontró una ruta para el módulo: ${moduleName}`);
    }
  };

  return (
    <div className="cont-modules">
      <header className="headerModulesPage">
        <br />
        <h1 className="titleHeaderModules">Sus Módulos</h1>
      </header>
      <div className="main">
        {loading
          ? Array.from({ length: 4 }).map((_, index) => (
              <Skeleton
                key={index}
                variant="rectangular"
                width={200}
                height={200}
                sx={{
                  margin: "10px",
                  borderRadius: "10px",
                  boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
                }}
              />
            ))
          : filteredModules.map((module) => {
              const moduleWithAction: modulesStructureTypes = {
                ...module,
                onClick: handleModuleNavigation, // Agrega la acción de navegación
              };
              return (
                <LogginModulesCard
                  key={module.title}
                  {...moduleWithAction} // Pasa el módulo completo como props
                />
              );
            })}
      </div>
    </div>
  );
}
```

---

### Explicación de los cambios

1. **Filtro de módulos**:
   - Se utiliza la propiedad `user.rol_id` para determinar qué módulos deben mostrarse.
   - Los `rol_id` se manejan con un `switch` para definir las reglas según tu descripción:
     - `rol_id === 1`: Muestra todos los módulos.
     - `rol_id === 2` o `rol_id === 3`: Muestra "Emisor", "Signos" y "Consultorio".
     - `rol_id === 4`: Muestra solo "Consultorio".
   
2. **Acceso al estado global**:
   - Se utiliza el hook `useAuthStore` para obtener la información del usuario y su rol.

3. **Manejo de módulos filtrados**:
   - Se crea un nuevo array `filteredModules` que contiene únicamente los módulos permitidos para el rol del usuario.

4. **Skeletons**:
   - Se mantienen para simular una carga inicial, pero solo se renderizan antes de completar el filtrado.

5. **Acción de navegación**:
   - Sigue funcionando con el `onClick` definido en `LogginModulesCard`.

Prueba este código y verifica que los módulos se muestren según los roles especificados. Si necesitas ajustes, avísame. 😊